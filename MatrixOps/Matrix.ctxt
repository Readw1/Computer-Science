#BlueJ class context
comment0.target=Matrix
comment1.params=inM
comment1.target=Matrix(double[][])
comment10.params=m
comment10.target=double\ calcdeterm(Matrix)
comment11.params=
comment11.target=boolean\ isSquare()
comment12.params=other
comment12.target=boolean\ canMultiplyBy(Matrix)
comment13.params=other
comment13.target=Matrix\ multiply(Matrix)
comment14.params=
comment14.target=Matrix\ createTranspose()
comment15.params=r\ c
comment15.target=Matrix\ createSubmatrix(int,\ int)
comment16.params=
comment16.target=Matrix\ createCofactorMatrix()
comment17.params=
comment17.target=Matrix\ createInverseMatrix()
comment18.params=d
comment18.target=Matrix\ multiply(double)
comment2.params=r\ c
comment2.target=Matrix(int,\ int)
comment2.text=\n\ Default\ constructor\ for\ objects\ of\ class\ Matrix\n\ Enter\ number\ of\ rows\ and\ columns,\ all\ elements\ set\ to\ 0\n
comment3.params=f
comment3.target=Matrix(java.lang.String)
comment3.text=\n\ Constructor\ for\ objects\ of\ class\ Matrix\n\ All\ info\ obtained\ from\ file\ f\n\ Format\ of\ f\:\ \#rows\ \#cols\ elements\ by\ row,\ whitespace\ delimeted\n
comment4.params=rows\ cols\ s
comment4.target=Matrix(int,\ int,\ java.lang.String)
comment4.text=\n\ Matrix\ constructor\ from\ number\ rows\ and\ columns\ provided\n\ and\ elements\ given\ within\ a\ string,\ at\ least\ 1\ space\ between\ elements\n
comment5.params=neo
comment5.target=Matrix(Matrix)
comment5.text=\n\ Copy\ constructor\ \n
comment6.params=
comment6.target=int\ getNumRows()
comment7.params=
comment7.target=int\ getNumCols()
comment8.params=
comment8.target=java.lang.String\ toString()
comment9.params=
comment9.target=double[][]\ getMatrix()
numComments=19
